/*
Package sdcio_schema is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/mava/go/pkg/mod/github.com/openconfig/ygot@v0.29.20/genutil/names.go
using the following YANG input files:
	- ./tests/schema/sdcio_model.yang
	- ./tests/schema/sdcio_model_choice.yang
	- ./tests/schema/sdcio_model_common.yang
	- ./tests/schema/sdcio_model_deref.yang
	- ./tests/schema/sdcio_model_doublekey.yang
	- ./tests/schema/sdcio_model_if.yang
	- ./tests/schema/sdcio_model_leaflist.yang
	- ./tests/schema/sdcio_model_list_unique.yang
	- ./tests/schema/sdcio_model_ni.yang
Imported modules were sourced from:
*/
package sdcio_schema

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Choices	*SdcioModel_Choices	`path:"choices" module:"sdcio_model"`
	Doublekey	map[SdcioModel_Doublekey_Key]*SdcioModel_Doublekey	`path:"doublekey" module:"sdcio_model"`
	Emptyconf	YANGEmpty	`path:"emptyconf" module:"sdcio_model"`
	Interface	map[string]*SdcioModel_Interface	`path:"interface" module:"sdcio_model"`
	Leaflist	*SdcioModel_Leaflist	`path:"leaflist" module:"sdcio_model"`
	ListUnique	*SdcioModel_ListUnique	`path:"list-unique" module:"sdcio_model"`
	MgmtInterface	*SdcioModel_MgmtInterface	`path:"mgmt-interface" module:"sdcio_model"`
	NetworkInstance	map[string]*SdcioModel_NetworkInstance	`path:"network-instance" module:"sdcio_model"`
	Patterntest	*string	`path:"patterntest" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// SdcioModel_Doublekey_Key represents the key for list Doublekey of element /device.
type SdcioModel_Doublekey_Key struct {
	Key1	string	`path:"key1"`
	Key2	string	`path:"key2"`
}

// IsYANGGoKeyStruct ensures that SdcioModel_Doublekey_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (SdcioModel_Doublekey_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the SdcioModel_Doublekey_Key key struct.
func (t SdcioModel_Doublekey_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"key1": t.Key1,
		"key2": t.Key2,
	}, nil
}

// NewDoublekey creates a new entry in the Doublekey list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewDoublekey(Key1 string, Key2 string) (*SdcioModel_Doublekey, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Doublekey == nil {
		t.Doublekey = make(map[SdcioModel_Doublekey_Key]*SdcioModel_Doublekey)
	}

	key := SdcioModel_Doublekey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Doublekey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Doublekey", key)
	}

	t.Doublekey[key] = &SdcioModel_Doublekey{
		Key1: &Key1,
		Key2: &Key2,
	}

	return t.Doublekey[key], nil
}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*SdcioModel_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SdcioModel_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SdcioModel_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewNetworkInstance(Name string) (*SdcioModel_NetworkInstance, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*SdcioModel_NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &SdcioModel_NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}


// SdcioModel_Choices represents the /sdcio_model/choices YANG schema element.
type SdcioModel_Choices struct {
	Case1	*SdcioModel_Choices_Case1	`path:"case1" module:"sdcio_model"`
	Case2	*SdcioModel_Choices_Case2	`path:"case2" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Choices implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Choices) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Choices"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Choices) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Choices.
func (*SdcioModel_Choices) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Choices_Case1 represents the /sdcio_model/choices/case1 YANG schema element.
type SdcioModel_Choices_Case1 struct {
	CaseElem	*SdcioModel_Choices_Case1_CaseElem	`path:"case-elem" module:"sdcio_model"`
	Log	*bool	`path:"log" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Choices_Case1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Choices_Case1) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices_Case1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Choices_Case1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices_Case1) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Choices_Case1) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Choices_Case1.
func (*SdcioModel_Choices_Case1) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Choices_Case1_CaseElem represents the /sdcio_model/choices/case1/case-elem YANG schema element.
type SdcioModel_Choices_Case1_CaseElem struct {
	Elem	*string	`path:"elem" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Choices_Case1_CaseElem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Choices_Case1_CaseElem) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices_Case1_CaseElem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Choices_Case1_CaseElem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices_Case1_CaseElem) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Choices_Case1_CaseElem) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Choices_Case1_CaseElem.
func (*SdcioModel_Choices_Case1_CaseElem) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Choices_Case2 represents the /sdcio_model/choices/case2 YANG schema element.
type SdcioModel_Choices_Case2 struct {
	Log	*bool	`path:"log" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Choices_Case2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Choices_Case2) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices_Case2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Choices_Case2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Choices_Case2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Choices_Case2) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Choices_Case2.
func (*SdcioModel_Choices_Case2) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Doublekey represents the /sdcio_model/doublekey YANG schema element.
type SdcioModel_Doublekey struct {
	Cont	*SdcioModel_Doublekey_Cont	`path:"cont" module:"sdcio_model"`
	Key1	*string	`path:"key1" module:"sdcio_model"`
	Key2	*string	`path:"key2" module:"sdcio_model"`
	Mandato	*string	`path:"mandato" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Doublekey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Doublekey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SdcioModel_Doublekey struct, which is a YANG list entry.
func (t *SdcioModel_Doublekey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Doublekey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Doublekey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Doublekey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Doublekey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Doublekey.
func (*SdcioModel_Doublekey) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Doublekey_Cont represents the /sdcio_model/doublekey/cont YANG schema element.
type SdcioModel_Doublekey_Cont struct {
	Value1	*string	`path:"value1" module:"sdcio_model"`
	Value2	*string	`path:"value2" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Doublekey_Cont implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Doublekey_Cont) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Doublekey_Cont) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Doublekey_Cont"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Doublekey_Cont) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Doublekey_Cont) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Doublekey_Cont.
func (*SdcioModel_Doublekey_Cont) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Interface represents the /sdcio_model/interface YANG schema element.
type SdcioModel_Interface struct {
	AdminState	E_SdcioModelIf_AdminState	`path:"admin-state" module:"sdcio_model"`
	Description	*string	`path:"description" module:"sdcio_model"`
	InterfaceType	*string	`path:"interface-type" module:"sdcio_model"`
	Mtu	*uint16	`path:"mtu" module:"sdcio_model"`
	Name	*string	`path:"name" module:"sdcio_model"`
	Subinterface	map[uint32]*SdcioModel_Interface_Subinterface	`path:"subinterface" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// SdcioModel_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *SdcioModel_Interface) NewSubinterface(Index uint32) (*SdcioModel_Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*SdcioModel_Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &SdcioModel_Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// ΛListKeyMap returns the keys of the SdcioModel_Interface struct, which is a YANG list entry.
func (t *SdcioModel_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Interface.
func (*SdcioModel_Interface) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Interface_Subinterface represents the /sdcio_model/interface/subinterface YANG schema element.
type SdcioModel_Interface_Subinterface struct {
	Description	*string	`path:"description" module:"sdcio_model"`
	Index	*uint32	`path:"index" module:"sdcio_model"`
	Type	E_SdcioModelCommon_SiType	`path:"type" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Interface_Subinterface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SdcioModel_Interface_Subinterface struct, which is a YANG list entry.
func (t *SdcioModel_Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Interface_Subinterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Interface_Subinterface.
func (*SdcioModel_Interface_Subinterface) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_Leaflist represents the /sdcio_model/leaflist YANG schema element.
type SdcioModel_Leaflist struct {
	Entry	[]string	`path:"entry" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_Leaflist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_Leaflist) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Leaflist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_Leaflist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_Leaflist) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_Leaflist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_Leaflist.
func (*SdcioModel_Leaflist) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_ListUnique represents the /sdcio_model/list-unique YANG schema element.
type SdcioModel_ListUnique struct {
	Server	map[string]*SdcioModel_ListUnique_Server	`path:"server" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_ListUnique implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_ListUnique) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// SdcioModel_ListUnique struct. The keys of the list are populated from the input
// arguments.
func (t *SdcioModel_ListUnique) NewServer(Name string) (*SdcioModel_ListUnique_Server, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*SdcioModel_ListUnique_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &SdcioModel_ListUnique_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_ListUnique) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_ListUnique"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_ListUnique) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_ListUnique) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_ListUnique.
func (*SdcioModel_ListUnique) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_ListUnique_Server represents the /sdcio_model/list-unique/server YANG schema element.
type SdcioModel_ListUnique_Server struct {
	Ip	*string	`path:"ip" module:"sdcio_model"`
	Name	*string	`path:"name" module:"sdcio_model"`
	Port	*uint16	`path:"port" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_ListUnique_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_ListUnique_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SdcioModel_ListUnique_Server struct, which is a YANG list entry.
func (t *SdcioModel_ListUnique_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_ListUnique_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_ListUnique_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_ListUnique_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_ListUnique_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_ListUnique_Server.
func (*SdcioModel_ListUnique_Server) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_MgmtInterface represents the /sdcio_model/mgmt-interface YANG schema element.
type SdcioModel_MgmtInterface struct {
	Name	*string	`path:"name" module:"sdcio_model"`
	Type	*string	`path:"type" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_MgmtInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_MgmtInterface) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_MgmtInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_MgmtInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_MgmtInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_MgmtInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_MgmtInterface.
func (*SdcioModel_MgmtInterface) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_NetworkInstance represents the /sdcio_model/network-instance YANG schema element.
type SdcioModel_NetworkInstance struct {
	AdminState	E_SdcioModelNi_AdminState	`path:"admin-state" module:"sdcio_model"`
	Description	*string	`path:"description" module:"sdcio_model"`
	Interface	map[string]*SdcioModel_NetworkInstance_Interface	`path:"interface" module:"sdcio_model"`
	Name	*string	`path:"name" module:"sdcio_model"`
	Protocol	*SdcioModel_NetworkInstance_Protocol	`path:"protocol" module:"sdcio_model"`
	Type	E_SdcioModelNi_NiType	`path:"type" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_NetworkInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SdcioModel_NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SdcioModel_NetworkInstance) NewInterface(Name string) (*SdcioModel_NetworkInstance_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SdcioModel_NetworkInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SdcioModel_NetworkInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// ΛListKeyMap returns the keys of the SdcioModel_NetworkInstance struct, which is a YANG list entry.
func (t *SdcioModel_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_NetworkInstance.
func (*SdcioModel_NetworkInstance) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_NetworkInstance_Interface represents the /sdcio_model/network-instance/interface YANG schema element.
type SdcioModel_NetworkInstance_Interface struct {
	InterfaceRef	*SdcioModel_NetworkInstance_Interface_InterfaceRef	`path:"interface-ref" module:"sdcio_model"`
	Name	*string	`path:"name" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_NetworkInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_NetworkInstance_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SdcioModel_NetworkInstance_Interface struct, which is a YANG list entry.
func (t *SdcioModel_NetworkInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_NetworkInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_NetworkInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_NetworkInstance_Interface.
func (*SdcioModel_NetworkInstance_Interface) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_NetworkInstance_Interface_InterfaceRef represents the /sdcio_model/network-instance/interface/interface-ref YANG schema element.
type SdcioModel_NetworkInstance_Interface_InterfaceRef struct {
	Interface	*string	`path:"interface" module:"sdcio_model"`
	Subinterface	*uint32	`path:"subinterface" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_NetworkInstance_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_NetworkInstance_Interface_InterfaceRef) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_NetworkInstance_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_NetworkInstance_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_NetworkInstance_Interface_InterfaceRef.
func (*SdcioModel_NetworkInstance_Interface_InterfaceRef) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_NetworkInstance_Protocol represents the /sdcio_model/network-instance/protocol YANG schema element.
type SdcioModel_NetworkInstance_Protocol struct {
	Bgp	*SdcioModel_NetworkInstance_Protocol_Bgp	`path:"bgp" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_NetworkInstance_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_NetworkInstance_Protocol) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_NetworkInstance_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Protocol) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_NetworkInstance_Protocol) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_NetworkInstance_Protocol.
func (*SdcioModel_NetworkInstance_Protocol) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_NetworkInstance_Protocol_Bgp represents the /sdcio_model/network-instance/protocol/bgp YANG schema element.
type SdcioModel_NetworkInstance_Protocol_Bgp struct {
	AdminState	E_SdcioModelNi_AdminState	`path:"admin-state" module:"sdcio_model"`
	AfiSafi	map[E_SdcioModelCommon_BgpAddressFamily]*SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi	`path:"afi-safi" module:"sdcio_model"`
	AutonomousSystem	*uint32	`path:"autonomous-system" module:"sdcio_model"`
	RouterId	*string	`path:"router-id" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_NetworkInstance_Protocol_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_NetworkInstance_Protocol_Bgp) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// SdcioModel_NetworkInstance_Protocol_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp) NewAfiSafi(AfiSafiName E_SdcioModelCommon_BgpAddressFamily) (*SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SdcioModelCommon_BgpAddressFamily]*SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_NetworkInstance_Protocol_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_NetworkInstance_Protocol_Bgp.
func (*SdcioModel_NetworkInstance_Protocol_Bgp) ΛBelongingModule() string {
	return "sdcio_model"
}


// SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi represents the /sdcio_model/network-instance/protocol/bgp/afi-safi YANG schema element.
type SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi struct {
	AdminState	E_SdcioModelNi_AdminState	`path:"admin-state" module:"sdcio_model"`
	AfiSafiName	E_SdcioModelCommon_BgpAddressFamily	`path:"afi-safi-name" module:"sdcio_model"`
}

// IsYANGGoStruct ensures that SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi struct, which is a YANG list entry.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi.
func (*SdcioModel_NetworkInstance_Protocol_Bgp_AfiSafi) ΛBelongingModule() string {
	return "sdcio_model"
}


// E_SdcioModelCommon_BgpAddressFamily is a derived int64 type which is used to represent
// the enumerated node SdcioModelCommon_BgpAddressFamily. An additional value named
// SdcioModelCommon_BgpAddressFamily_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SdcioModelCommon_BgpAddressFamily int64

// IsYANGGoEnum ensures that SdcioModelCommon_BgpAddressFamily implements the yang.GoEnum
// interface. This ensures that SdcioModelCommon_BgpAddressFamily can be identified as a
// mapped type for a YANG enumeration.
func (E_SdcioModelCommon_BgpAddressFamily) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SdcioModelCommon_BgpAddressFamily.
func (E_SdcioModelCommon_BgpAddressFamily) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SdcioModelCommon_BgpAddressFamily.
func (e E_SdcioModelCommon_BgpAddressFamily) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SdcioModelCommon_BgpAddressFamily")
}

const (
	// SdcioModelCommon_BgpAddressFamily_UNSET corresponds to the value UNSET of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_UNSET E_SdcioModelCommon_BgpAddressFamily = 0
	// SdcioModelCommon_BgpAddressFamily_evpn corresponds to the value evpn of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_evpn E_SdcioModelCommon_BgpAddressFamily = 1
	// SdcioModelCommon_BgpAddressFamily_ipv4_labeled_unicast corresponds to the value ipv4_labeled_unicast of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_ipv4_labeled_unicast E_SdcioModelCommon_BgpAddressFamily = 2
	// SdcioModelCommon_BgpAddressFamily_ipv4_unicast corresponds to the value ipv4_unicast of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_ipv4_unicast E_SdcioModelCommon_BgpAddressFamily = 3
	// SdcioModelCommon_BgpAddressFamily_ipv6_labeled_unicast corresponds to the value ipv6_labeled_unicast of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_ipv6_labeled_unicast E_SdcioModelCommon_BgpAddressFamily = 4
	// SdcioModelCommon_BgpAddressFamily_ipv6_unicast corresponds to the value ipv6_unicast of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_ipv6_unicast E_SdcioModelCommon_BgpAddressFamily = 5
	// SdcioModelCommon_BgpAddressFamily_l3vpn_ipv4_unicast corresponds to the value l3vpn_ipv4_unicast of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_l3vpn_ipv4_unicast E_SdcioModelCommon_BgpAddressFamily = 6
	// SdcioModelCommon_BgpAddressFamily_l3vpn_ipv6_unicast corresponds to the value l3vpn_ipv6_unicast of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_l3vpn_ipv6_unicast E_SdcioModelCommon_BgpAddressFamily = 7
	// SdcioModelCommon_BgpAddressFamily_route_target corresponds to the value route_target of SdcioModelCommon_BgpAddressFamily
	SdcioModelCommon_BgpAddressFamily_route_target E_SdcioModelCommon_BgpAddressFamily = 8
)


// E_SdcioModelCommon_SiType is a derived int64 type which is used to represent
// the enumerated node SdcioModelCommon_SiType. An additional value named
// SdcioModelCommon_SiType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SdcioModelCommon_SiType int64

// IsYANGGoEnum ensures that SdcioModelCommon_SiType implements the yang.GoEnum
// interface. This ensures that SdcioModelCommon_SiType can be identified as a
// mapped type for a YANG enumeration.
func (E_SdcioModelCommon_SiType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SdcioModelCommon_SiType.
func (E_SdcioModelCommon_SiType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SdcioModelCommon_SiType.
func (e E_SdcioModelCommon_SiType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SdcioModelCommon_SiType")
}

const (
	// SdcioModelCommon_SiType_UNSET corresponds to the value UNSET of SdcioModelCommon_SiType
	SdcioModelCommon_SiType_UNSET E_SdcioModelCommon_SiType = 0
	// SdcioModelCommon_SiType_bridged corresponds to the value bridged of SdcioModelCommon_SiType
	SdcioModelCommon_SiType_bridged E_SdcioModelCommon_SiType = 1
	// SdcioModelCommon_SiType_routed corresponds to the value routed of SdcioModelCommon_SiType
	SdcioModelCommon_SiType_routed E_SdcioModelCommon_SiType = 2
)


// E_SdcioModelIf_AdminState is a derived int64 type which is used to represent
// the enumerated node SdcioModelIf_AdminState. An additional value named
// SdcioModelIf_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SdcioModelIf_AdminState int64

// IsYANGGoEnum ensures that SdcioModelIf_AdminState implements the yang.GoEnum
// interface. This ensures that SdcioModelIf_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SdcioModelIf_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SdcioModelIf_AdminState.
func (E_SdcioModelIf_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SdcioModelIf_AdminState.
func (e E_SdcioModelIf_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SdcioModelIf_AdminState")
}

const (
	// SdcioModelIf_AdminState_UNSET corresponds to the value UNSET of SdcioModelIf_AdminState
	SdcioModelIf_AdminState_UNSET E_SdcioModelIf_AdminState = 0
	// SdcioModelIf_AdminState_enable corresponds to the value enable of SdcioModelIf_AdminState
	SdcioModelIf_AdminState_enable E_SdcioModelIf_AdminState = 2
	// SdcioModelIf_AdminState_disable corresponds to the value disable of SdcioModelIf_AdminState
	SdcioModelIf_AdminState_disable E_SdcioModelIf_AdminState = 3
)


// E_SdcioModelNi_AdminState is a derived int64 type which is used to represent
// the enumerated node SdcioModelNi_AdminState. An additional value named
// SdcioModelNi_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SdcioModelNi_AdminState int64

// IsYANGGoEnum ensures that SdcioModelNi_AdminState implements the yang.GoEnum
// interface. This ensures that SdcioModelNi_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SdcioModelNi_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SdcioModelNi_AdminState.
func (E_SdcioModelNi_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SdcioModelNi_AdminState.
func (e E_SdcioModelNi_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SdcioModelNi_AdminState")
}

const (
	// SdcioModelNi_AdminState_UNSET corresponds to the value UNSET of SdcioModelNi_AdminState
	SdcioModelNi_AdminState_UNSET E_SdcioModelNi_AdminState = 0
	// SdcioModelNi_AdminState_enable corresponds to the value enable of SdcioModelNi_AdminState
	SdcioModelNi_AdminState_enable E_SdcioModelNi_AdminState = 2
	// SdcioModelNi_AdminState_disable corresponds to the value disable of SdcioModelNi_AdminState
	SdcioModelNi_AdminState_disable E_SdcioModelNi_AdminState = 3
)


// E_SdcioModelNi_NiType is a derived int64 type which is used to represent
// the enumerated node SdcioModelNi_NiType. An additional value named
// SdcioModelNi_NiType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SdcioModelNi_NiType int64

// IsYANGGoEnum ensures that SdcioModelNi_NiType implements the yang.GoEnum
// interface. This ensures that SdcioModelNi_NiType can be identified as a
// mapped type for a YANG enumeration.
func (E_SdcioModelNi_NiType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SdcioModelNi_NiType.
func (E_SdcioModelNi_NiType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SdcioModelNi_NiType.
func (e E_SdcioModelNi_NiType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SdcioModelNi_NiType")
}

const (
	// SdcioModelNi_NiType_UNSET corresponds to the value UNSET of SdcioModelNi_NiType
	SdcioModelNi_NiType_UNSET E_SdcioModelNi_NiType = 0
	// SdcioModelNi_NiType_default corresponds to the value default of SdcioModelNi_NiType
	SdcioModelNi_NiType_default E_SdcioModelNi_NiType = 1
	// SdcioModelNi_NiType_host corresponds to the value host of SdcioModelNi_NiType
	SdcioModelNi_NiType_host E_SdcioModelNi_NiType = 2
	// SdcioModelNi_NiType_ip_vrf corresponds to the value ip_vrf of SdcioModelNi_NiType
	SdcioModelNi_NiType_ip_vrf E_SdcioModelNi_NiType = 3
	// SdcioModelNi_NiType_mac_vrf corresponds to the value mac_vrf of SdcioModelNi_NiType
	SdcioModelNi_NiType_mac_vrf E_SdcioModelNi_NiType = 4
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_SdcioModelCommon_BgpAddressFamily": {
		1: {Name: "evpn", DefiningModule: "sdcio_model_common"},
		2: {Name: "ipv4-labeled-unicast", DefiningModule: "sdcio_model_common"},
		3: {Name: "ipv4-unicast", DefiningModule: "sdcio_model_common"},
		4: {Name: "ipv6-labeled-unicast", DefiningModule: "sdcio_model_common"},
		5: {Name: "ipv6-unicast", DefiningModule: "sdcio_model_common"},
		6: {Name: "l3vpn-ipv4-unicast", DefiningModule: "sdcio_model_common"},
		7: {Name: "l3vpn-ipv6-unicast", DefiningModule: "sdcio_model_common"},
		8: {Name: "route-target", DefiningModule: "sdcio_model_common"},
	},
	"E_SdcioModelCommon_SiType": {
		1: {Name: "bridged", DefiningModule: "sdcio_model_common"},
		2: {Name: "routed", DefiningModule: "sdcio_model_common"},
	},
	"E_SdcioModelIf_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SdcioModelNi_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SdcioModelNi_NiType": {
		1: {Name: "default", DefiningModule: "sdcio_model_ni"},
		2: {Name: "host", DefiningModule: "sdcio_model_ni"},
		3: {Name: "ip-vrf", DefiningModule: "sdcio_model_ni"},
		4: {Name: "mac-vrf", DefiningModule: "sdcio_model_ni"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6d, 0x73, 0xda, 0xba,
		0x9e, 0x7f, 0x9f, 0x4f, 0xa1, 0xe3, 0xdd, 0x1d, 0x60, 0x37, 0x06, 0x43, 0x12, 0xda, 0x64, 0x27,
		0xd3, 0x6d, 0x7b, 0x7a, 0xce, 0x66, 0x6e, 0x73, 0x6e, 0xa7, 0x39, 0xf7, 0xbe, 0x58, 0xc2, 0x66,
		0x0d, 0x08, 0xa2, 0x29, 0xc8, 0xac, 0x2d, 0xa7, 0xcd, 0x36, 0xec, 0x67, 0xbf, 0x63, 0x1b, 0x8c,
		0x8d, 0x6d, 0x59, 0x92, 0x65, 0x6c, 0x88, 0x66, 0xce, 0xe4, 0x50, 0x90, 0xad, 0xa7, 0xdf, 0xff,
		0x41, 0xff, 0x27, 0xfd, 0x3c, 0x01, 0x00, 0x00, 0xed, 0x0f, 0x73, 0x01, 0xb5, 0x2b, 0xa0, 0x4d,
		0xe0, 0x13, 0x1a, 0x43, 0xed, 0x34, 0xf8, 0xf6, 0x2f, 0x08, 0x4f, 0xb4, 0x2b, 0xd0, 0x5d, 0xff,
		0xf3, 0xa3, 0x85, 0xa7, 0x68, 0xa6, 0x5d, 0x01, 0x63, 0xfd, 0xc5, 0xaf, 0xc8, 0xd6, 0xae, 0x40,
		0xf0, 0x0a, 0xff, 0x8b, 0xf1, 0xa3, 0x85, 0xc6, 0xd0, 0x89, 0x7d, 0x19, 0x7b, 0xff, 0xa6, 0xc1,
		0x69, 0xfc, 0xe7, 0x78, 0x47, 0xe1, 0xd7, 0xbb, 0x1d, 0x86, 0x3f, 0x7c, 0xb1, 0xe1, 0x14, 0xfd,
		0x48, 0x74, 0x13, 0xeb, 0xca, 0x99, 0x8c, 0x91, 0xf5, 0xb0, 0xb0, 0x26, 0x70, 0xfe, 0x10, 0x74,
		0xbb, 0xd3, 0xab, 0xdf, 0xfa, 0xce, 0x72, 0xed, 0x31, 0x4c, 0x7d, 0x53, 0x30, 0x32, 0xf8, 0xfc,
		0xdd, 0xb2, 0xbd, 0xc1, 0x69, 0xcb, 0xa0, 0xd3, 0xd3, 0xf4, 0x86, 0xff, 0x69, 0x3a, 0xef, 0xed,
		0x99, 0xbb, 0x80, 0x98, 0x68, 0x57, 0x80, 0xd8, 0x2e, 0xcc, 0x68, 0x18, 0x69, 0x95, 0x36, 0xc6,
		0xc4, 0x43, 0xab, 0xd8, 0x37, 0xab, 0x9d, 0x95, 0xd8, 0xdd, 0x82, 0x9d, 0xad, 0x18, 0x9b, 0x0e,
		0x65, 0x72, 0xf1, 0x5d, 0xf1, 0xdb, 0x66, 0x0c, 0x7a, 0xbd, 0x41, 0x17, 0x19, 0x3f, 0x67, 0x6d,
		0x14, 0xcb, 0x86, 0x89, 0x6d, 0x1c, 0xeb, 0x06, 0x72, 0x6f, 0x24, 0xf7, 0x86, 0x0a, 0x6f, 0x6c,
		0xfa, 0x06, 0x67, 0x6c, 0x74, 0xee, 0x86, 0x6f, 0x37, 0xde, 0x74, 0x60, 0x37, 0x7f, 0x3d, 0xc2,
		0xbd, 0xf7, 0x9b, 0xe7, 0x4c, 0x6d, 0xbd, 0xfd, 0xe7, 0x39, 0xcd, 0xf2, 0x60, 0xc0, 0x03, 0x87,
		0x62, 0xb0, 0xe0, 0x85, 0x87, 0x30, 0x4c, 0x84, 0xe1, 0x52, 0x18, 0x36, 0x74, 0xf8, 0xe4, 0xc0,
		0x88, 0x19, 0x4e, 0x9c, 0xb0, 0x12, 0x82, 0x57, 0x8e, 0x18, 0x28, 0x0c, 0x37, 0x11, 0xd8, 0xc9,
		0x81, 0x9f, 0x28, 0x0c, 0x0b, 0xc3, 0xb1, 0x30, 0x2c, 0xa5, 0xc1, 0x93, 0x0d, 0xa6, 0x8c, 0x70,
		0xe5, 0x86, 0x6d, 0x0c, 0xbe, 0x3a, 0x9c, 0xc3, 0x05, 0xff, 0x1e, 0x44, 0xa1, 0x1c, 0xbc, 0x82,
		0x73, 0x09, 0xf9, 0x60, 0x2d, 0x0c, 0xef, 0x22, 0x30, 0x97, 0x0b, 0xf7, 0xa2, 0xb0, 0x97, 0x06,
		0x7f, 0x69, 0x64, 0x20, 0x9d, 0x1c, 0xf8, 0xc8, 0x82, 0x93, 0x3c, 0x84, 0xc9, 0x24, 0x7c, 0x50,
		0x88, 0x52, 0x12, 0x20, 0x12, 0x20, 0x96, 0x5d, 0xa2, 0x31, 0x04, 0x1f, 0x17, 0x25, 0x1e, 0x19,
		0x44, 0x54, 0x0e, 0x31, 0xc9, 0x22, 0x2a, 0xe9, 0xc4, 0x25, 0x9d, 0xc8, 0x4a, 0x23, 0x36, 0x31,
		0xa2, 0x13, 0x24, 0xbe, 0x70, 0x16, 0x7f, 0x3e, 0x2f, 0xa1, 0x24, 0x1c, 0x11, 0x1b, 0xe1, 0x59,
		0x11, 0xec, 0x6c, 0x44, 0xd1, 0xdb, 0x93, 0xfd, 0xac, 0x5b, 0xb9, 0xec, 0xed, 0x3d, 0xc6, 0x16,
		0x31, 0x09, 0xb2, 0xb0, 0x18, 0x97, 0x73, 0xc6, 0x8f, 0x70, 0x61, 0x2e, 0x4d, 0xf2, 0xe8, 0xad,
		0x6e, 0x27, 0x02, 0xb1, 0xce, 0xda, 0x50, 0xd1, 0xd9, 0x1e, 0x8d, 0x3b, 0xbe, 0x2a, 0x1b, 0xf9,
		0xab, 0x0b, 0xb2, 0x37, 0x6f, 0x1b, 0xdd, 0x31, 0xc1, 0xeb, 0x4d, 0xbd, 0xf3, 0x7a, 0xbd, 0xf5,
		0x71, 0xfd, 0x31, 0xe8, 0xf4, 0xe1, 0xa3, 0xd7, 0x87, 0xff, 0xf7, 0x93, 0xd7, 0xc5, 0x49, 0x39,
		0x2b, 0xce, 0xb1, 0xda, 0xda, 0xdc, 0x9a, 0x89, 0x2b, 0x4e, 0xde, 0xc3, 0xbc, 0x82, 0x0b, 0x4e,
		0x4d, 0x77, 0xee, 0x11, 0xfe, 0x80, 0x7f, 0x7d, 0xa7, 0xe6, 0xdc, 0xe1, 0xe4, 0x0e, 0x43, 0x31,
		0x95, 0xce, 0x50, 0x2a, 0x9d, 0x52, 0xe9, 0xf6, 0xcb, 0xf3, 0x84, 0xa5, 0x49, 0x88, 0x83, 0x91,
		0x65, 0xcd, 0xa1, 0x89, 0x45, 0x36, 0x7f, 0x23, 0x3e, 0xba, 0x65, 0xb1, 0x24, 0xa9, 0x87, 0x44,
		0xf8, 0x83, 0xd8, 0xa6, 0xee, 0x62, 0x87, 0x98, 0xa3, 0x39, 0xdf, 0xa2, 0x79, 0xd8, 0x74, 0x20,
		0xf6, 0x81, 0xce, 0xc7, 0x81, 0x0a, 0x6c, 0x8c, 0x2f, 0x5a, 0x00, 0x72, 0x80, 0x39, 0x26, 0xe8,
		0xa9, 0x06, 0xd4, 0x19, 0xac, 0x40, 0x9d, 0xe8, 0x73, 0x77, 0x89, 0xca, 0x26, 0x4e, 0xe6, 0xd6,
		0x43, 0xa9, 0xc8, 0x15, 0x54, 0x6c, 0xc4, 0x15, 0x1a, 0x1e, 0x5b, 0x16, 0x9b, 0xfa, 0xc2, 0xb6,
		0x35, 0xab, 0x92, 0xcd, 0x9b, 0x9c, 0x0b, 0x29, 0xb2, 0x80, 0xf4, 0x89, 0x66, 0x0f, 0x9f, 0x32,
		0x74, 0x1f, 0xe6, 0x3d, 0x3e, 0x1b, 0x7e, 0x4f, 0xd9, 0xf0, 0x8b, 0xaa, 0x18, 0xaf, 0xc2, 0x86,
		0xdf, 0x13, 0xb3, 0xe1, 0xf7, 0x94, 0x0d, 0x5f, 0xd9, 0xf0, 0x2b, 0xb6, 0xe1, 0xab, 0x43, 0xa8,
		0x3a, 0x84, 0xaa, 0x43, 0xa8, 0x3a, 0x84, 0xaa, 0x43, 0xa8, 0x3a, 0x84, 0xaa, 0x43, 0xe8, 0x11,
		0x1d, 0x42, 0x7b, 0x1d, 0x1e, 0x15, 0x93, 0xfd, 0x10, 0xda, 0x7b, 0x2d, 0x87, 0xd0, 0x9e, 0xf0,
		0x21, 0x94, 0x2b, 0xf6, 0x8c, 0x71, 0x22, 0x7c, 0x13, 0x48, 0x1f, 0xfa, 0x8a, 0x33, 0x0e, 0x32,
		0x67, 0x68, 0x0c, 0x43, 0x4a, 0x8b, 0x0e, 0xcd, 0x43, 0x59, 0x7c, 0xec, 0xdb, 0x11, 0x46, 0x46,
		0xa7, 0x4d, 0x2c, 0x77, 0x34, 0x87, 0xdf, 0xe0, 0x73, 0x76, 0x54, 0xec, 0xb6, 0xc9, 0x9e, 0xe3,
		0x62, 0xb3, 0x3a, 0x06, 0xf5, 0x0a, 0x8d, 0xdd, 0x0e, 0x53, 0x5a, 0x74, 0xac, 0xe5, 0xf7, 0x92,
		0x17, 0x17, 0xeb, 0xb5, 0xa2, 0x47, 0xc4, 0x76, 0xf7, 0x1d, 0x11, 0x4b, 0xdb, 0x32, 0x5e, 0x09,
		0x5c, 0x61, 0x50, 0x2c, 0x65, 0x4b, 0xc5, 0x78, 0x53, 0x6e, 0x5c, 0xec, 0x93, 0x39, 0x77, 0x79,
		0x02, 0x63, 0xd7, 0xed, 0xd9, 0xac, 0x6a, 0x46, 0x5d, 0xac, 0x6a, 0x2c, 0xf0, 0x38, 0x02, 0xc3,
		0x1a, 0x03, 0x7c, 0xe4, 0xc8, 0x6e, 0xe6, 0x93, 0x0e, 0x7f, 0x90, 0x06, 0x63, 0x30, 0x86, 0x98,
		0x05, 0xd9, 0x47, 0x6f, 0x8f, 0x13, 0xed, 0x3d, 0x85, 0x76, 0x85, 0xf6, 0xda, 0xa2, 0x7d, 0xdf,
		0xaa, 0x6a, 0xb8, 0xea, 0x1d, 0x8a, 0x1e, 0x40, 0x57, 0x13, 0x7f, 0xdd, 0xbc, 0xe2, 0xe1, 0xa3,
		0xf7, 0x0a, 0x56, 0x4d, 0x37, 0x45, 0x19, 0xfb, 0x06, 0x9f, 0xbb, 0xf9, 0x0a, 0x8b, 0xdf, 0x8a,
		0xae, 0xb0, 0x18, 0x4a, 0x61, 0xa9, 0x87, 0xc2, 0x92, 0x4b, 0x6b, 0xec, 0x34, 0x96, 0x43, 0x5b,
		0xcc, 0x08, 0xeb, 0x31, 0x21, 0xac, 0xa7, 0x10, 0xa6, 0x10, 0x26, 0x82, 0xb0, 0x85, 0x89, 0x27,
		0x26, 0xb1, 0xf2, 0x41, 0xb6, 0x69, 0xa8, 0x70, 0x76, 0x10, 0x38, 0xbb, 0x0d, 0xb6, 0xcb, 0x7e,
		0xa6, 0x9c, 0x87, 0x2b, 0xc5, 0x22, 0xd5, 0x46, 0xf0, 0x17, 0xdf, 0x32, 0xe3, 0x8b, 0x4e, 0x90,
		0xc2, 0xdd, 0xb4, 0xcf, 0xc8, 0x21, 0xef, 0x09, 0xc9, 0x30, 0x24, 0xdc, 0x22, 0xfc, 0x69, 0x0e,
		0xbd, 0x65, 0x76, 0xd2, 0x11, 0xa7, 0xdd, 0x9a, 0x3f, 0x22, 0x2d, 0xba, 0x6f, 0xcf, 0xcf, 0xfb,
		0x6f, 0xce, 0xcf, 0x8d, 0x37, 0x67, 0x6f, 0x8c, 0xcb, 0x8b, 0x8b, 0x6e, 0xbf, 0x9b, 0x92, 0x54,
		0xab, 0xfd, 0xd5, 0x9e, 0x40, 0x1b, 0x4e, 0x3e, 0x78, 0x43, 0xc3, 0xee, 0x7c, 0x4e, 0x6b, 0xf2,
		0x37, 0x07, 0x7a, 0x83, 0xf3, 0x1d, 0x8e, 0x65, 0xd9, 0xc8, 0xa8, 0x86, 0xa2, 0x7c, 0xf5, 0x87,
		0xc5, 0x4e, 0x06, 0x17, 0x4b, 0xf2, 0x3c, 0xb6, 0xf0, 0x34, 0xdb, 0x4e, 0xb6, 0x6d, 0x92, 0x6e,
		0x27, 0x33, 0x4a, 0xb2, 0x93, 0xd5, 0xda, 0x3a, 0xc6, 0x6b, 0x13, 0xcb, 0xa4, 0xc4, 0xf8, 0x32,
		0xa7, 0xcd, 0x79, 0x43, 0x78, 0x67, 0x0c, 0xdb, 0x89, 0x30, 0x81, 0xf6, 0xd4, 0x4c, 0x59, 0xa2,
		0xb0, 0x9f, 0x6d, 0x93, 0x3d, 0x9b, 0x3d, 0xd1, 0xb4, 0xde, 0xf6, 0x4e, 0x34, 0x95, 0x66, 0xe8,
		0x34, 0x27, 0x0b, 0x84, 0x75, 0x87, 0x98, 0x84, 0xa1, 0x0e, 0x40, 0xb4, 0x71, 0x96, 0x99, 0x8d,
		0x21, 0x26, 0x42, 0x83, 0xd8, 0xf7, 0x75, 0xa6, 0x36, 0x18, 0xd6, 0x4c, 0xa8, 0xa7, 0x62, 0xe1,
		0x80, 0xa4, 0x79, 0x1a, 0x56, 0xca, 0x56, 0x17, 0xf3, 0x71, 0x12, 0x23, 0x63, 0x4a, 0xc8, 0xa1,
		0xf6, 0x09, 0xbb, 0xf9, 0x89, 0x86, 0xda, 0x9f, 0xd6, 0x5d, 0xa0, 0x15, 0x30, 0xd9, 0x26, 0xba,
		0x3e, 0x13, 0x0b, 0x30, 0xc8, 0x60, 0x98, 0xe8, 0xf9, 0x2e, 0x18, 0xe4, 0x64, 0x63, 0x96, 0xd9,
		0x7c, 0x62, 0xdd, 0x50, 0xdc, 0x0a, 0xb1, 0xa6, 0x9b, 0xfe, 0xae, 0x40, 0x8f, 0x61, 0x88, 0xeb,
		0xc9, 0x5c, 0x81, 0xee, 0x5e, 0x8c, 0x27, 0x1c, 0x31, 0x0b, 0xda, 0xc2, 0x75, 0xf2, 0x23, 0xa4,
		0x38, 0x0c, 0x4a, 0xcd, 0x66, 0x1b, 0x5c, 0x83, 0x46, 0x30, 0xe3, 0x46, 0x0b, 0x98, 0x78, 0x02,
		0x1c, 0x62, 0xda, 0xc4, 0xd1, 0xbf, 0x23, 0xf2, 0xd8, 0x6c, 0xb7, 0x3b, 0x9e, 0xa6, 0x71, 0x0a,
		0x1a, 0xce, 0xb3, 0x43, 0xe0, 0xc2, 0x68, 0xb4, 0x5a, 0xc0, 0xb2, 0x01, 0xb6, 0x48, 0x33, 0xaf,
		0x1d, 0x0b, 0x1a, 0x3e, 0xd9, 0xb6, 0x65, 0xdf, 0x42, 0xc7, 0x31, 0x67, 0x90, 0x3f, 0x54, 0x32,
		0x42, 0x19, 0xc0, 0x5b, 0x19, 0x30, 0x82, 0x80, 0x19, 0x89, 0x40, 0x30, 0x78, 0x22, 0xca, 0x7d,
		0xa0, 0x37, 0x7c, 0x7d, 0xb1, 0x1e, 0x3f, 0x87, 0x43, 0xbd, 0x48, 0xa4, 0x44, 0x8c, 0x39, 0x51,
		0x96, 0x60, 0x3f, 0xde, 0xf8, 0xcc, 0x5f, 0x29, 0xf1, 0x75, 0x9a, 0x0d, 0xa7, 0xd0, 0x66, 0x8a,
		0xb5, 0xe1, 0xc0, 0xf2, 0xd7, 0xdf, 0x3e, 0x82, 0xde, 0xdb, 0xfe, 0xd9, 0x15, 0xf8, 0xf3, 0x11,
		0x82, 0x9b, 0x8d, 0xba, 0xe3, 0x80, 0xdf, 0x6d, 0xcb, 0x5d, 0x82, 0xdb, 0x9b, 0x0f, 0x40, 0x07,
		0x68, 0xfa, 0xde, 0x5b, 0xb1, 0x3b, 0x62, 0x12, 0xd7, 0x29, 0xd9, 0x8e, 0xbd, 0x9d, 0xe5, 0x3e,
		0x4d, 0xd9, 0x02, 0xcb, 0x50, 0x1e, 0x06, 0x0a, 0xd8, 0x2f, 0x26, 0xd0, 0x19, 0xdb, 0x68, 0x49,
		0x35, 0x2a, 0x47, 0x2a, 0x69, 0x6d, 0x1b, 0x2b, 0x95, 0xe7, 0xe0, 0x55, 0x9e, 0xfc, 0xed, 0x8c,
		0x9b, 0x26, 0x28, 0x6d, 0x3e, 0x43, 0x3c, 0xf3, 0x8f, 0xd8, 0x85, 0xf9, 0xcc, 0x2d, 0x62, 0x0f,
		0xcd, 0xd2, 0xfe, 0x6e, 0xce, 0x5d, 0xc8, 0x11, 0x99, 0xff, 0x9b, 0x6d, 0x8e, 0xbd, 0xe9, 0xfe,
		0x8a, 0x66, 0x28, 0xcb, 0xb8, 0x91, 0xbe, 0x64, 0x70, 0x66, 0xfa, 0x71, 0x71, 0x69, 0x36, 0x09,
		0x01, 0xb5, 0x6a, 0x63, 0x45, 0xe1, 0x9f, 0x6a, 0xef, 0xe2, 0xa2, 0x7e, 0x93, 0xad, 0x80, 0x71,
		0x85, 0x07, 0x6d, 0x9d, 0xd0, 0x00, 0x9f, 0x3c, 0x98, 0x07, 0xed, 0x15, 0xfb, 0x3a, 0x78, 0xf6,
		0xb5, 0x27, 0x03, 0x3f, 0x71, 0x19, 0x8c, 0xfb, 0xc4, 0x55, 0x88, 0x3a, 0x7c, 0x44, 0xb9, 0x08,
		0x93, 0x6e, 0x9f, 0x01, 0x51, 0x7d, 0x4a, 0x93, 0xaf, 0x26, 0x9e, 0xc1, 0xca, 0x24, 0xa1, 0xf1,
		0x7a, 0x24, 0x61, 0xff, 0xe2, 0xe2, 0x4c, 0xc9, 0x42, 0x6f, 0x90, 0x6b, 0x37, 0x45, 0x0e, 0x93,
		0xf2, 0x5b, 0x29, 0x2e, 0x75, 0xf0, 0x5c, 0x6a, 0xab, 0xc9, 0x50, 0x76, 0xf4, 0x50, 0x34, 0xf7,
		0xb3, 0x57, 0xa4, 0xb9, 0x1b, 0xc7, 0xc3, 0xac, 0x28, 0x80, 0xfa, 0x62, 0x12, 0x02, 0x6d, 0x9c,
		0x8b, 0x28, 0xad, 0xb9, 0x98, 0x2d, 0x88, 0xf1, 0xb2, 0x36, 0x65, 0xbe, 0xcc, 0xad, 0xa6, 0xf1,
		0xd2, 0x1d, 0x18, 0xfa, 0xe5, 0xd0, 0xff, 0xf3, 0xd2, 0x6b, 0x0e, 0x0c, 0xfd, 0x7c, 0xfd, 0x8f,
		0x8b, 0x81, 0xa1, 0x5f, 0x0c, 0x5b, 0x2f, 0x83, 0x6e, 0xf8, 0xbb, 0xff, 0xb1, 0xf5, 0x02, 0xc9,
		0x23, 0xb4, 0x31, 0x24, 0x7a, 0xd3, 0xff, 0xa2, 0x79, 0x7f, 0x3f, 0x69, 0xfd, 0x34, 0x4e, 0xbb,
		0xab, 0x66, 0x67, 0x60, 0x8e, 0xc6, 0x93, 0x61, 0xeb, 0x5d, 0xb3, 0xb3, 0xf3, 0x53, 0xeb, 0x5d,
		0xa7, 0xb9, 0xdb, 0xbc, 0xf5, 0xd2, 0xf4, 0x7a, 0xef, 0x0e, 0xbd, 0x6f, 0x5e, 0x9a, 0xdd, 0xde,
		0xc0, 0xd0, 0xdf, 0x0e, 0x5b, 0xad, 0xd6, 0x0b, 0xb2, 0x47, 0x62, 0x43, 0x9b, 0x9b, 0xb3, 0x9d,
		0x6e, 0x7a, 0x7e, 0x37, 0x86, 0x61, 0xb4, 0x5a, 0x2d, 0xad, 0x14, 0x59, 0xe0, 0xb8, 0xa3, 0x6c,
		0x37, 0x65, 0x92, 0x17, 0x47, 0x5b, 0xd7, 0x2c, 0x2b, 0x40, 0xc9, 0x86, 0x4d, 0x0f, 0xb9, 0x79,
		0x00, 0x2c, 0x56, 0x3c, 0x41, 0xf3, 0x0f, 0xa8, 0x63, 0x8c, 0x34, 0x15, 0x1a, 0x32, 0x8c, 0xca,
		0x15, 0x07, 0x47, 0xd3, 0xa0, 0xc3, 0xc8, 0xbb, 0xa5, 0x47, 0x45, 0xb3, 0xc3, 0x85, 0x55, 0xf7,
		0xe0, 0xd5, 0x41, 0xd8, 0x75, 0x11, 0x21, 0x9d, 0x44, 0xd4, 0xaa, 0x58, 0x58, 0x6e, 0x8b, 0xcb,
		0x6f, 0x0e, 0x9d, 0x45, 0x48, 0x77, 0x11, 0xb7, 0x3e, 0xd6, 0x61, 0x51, 0x24, 0xb9, 0xe6, 0x86,
		0x25, 0xa4, 0xb2, 0x20, 0x3c, 0x81, 0x3f, 0xd8, 0x59, 0x75, 0xd0, 0x5c, 0x31, 0x69, 0xc5, 0xa4,
		0x19, 0x2c, 0x58, 0x67, 0x3d, 0x0e, 0xfe, 0xfc, 0x86, 0xa1, 0x29, 0x9b, 0x45, 0x6b, 0xdf, 0xdc,
		0xd9, 0x50, 0xdc, 0x79, 0x77, 0x49, 0x2e, 0x2f, 0x2f, 0x2f, 0x15, 0x7b, 0xe6, 0x22, 0x31, 0x81,
		0x52, 0x26, 0x6c, 0xe1, 0x41, 0x02, 0xe4, 0x10, 0x0f, 0x17, 0x32, 0x52, 0xe3, 0x84, 0x38, 0x42,
		0x85, 0x04, 0xa3, 0x85, 0xc2, 0xe1, 0x08, 0x45, 0x0d, 0x51, 0x4f, 0x98, 0xc0, 0x97, 0x63, 0x61,
		0x04, 0x8d, 0x01, 0xa6, 0x96, 0x0d, 0xd6, 0x83, 0x03, 0x79, 0xe7, 0x50, 0x59, 0x12, 0x24, 0x4b,
		0x9a, 0x88, 0x46, 0x19, 0x15, 0x16, 0x30, 0xd9, 0xc2, 0x86, 0x7f, 0xe9, 0xaa, 0x2d, 0x1f, 0x54,
		0x89, 0x2a, 0x45, 0x58, 0x84, 0x64, 0x08, 0x47, 0x8a, 0xf3, 0x57, 0x29, 0x52, 0x4a, 0x91, 0xda,
		0x6a, 0xdc, 0x13, 0x88, 0x09, 0x22, 0xcf, 0x36, 0x9c, 0xf2, 0x9c, 0x76, 0x19, 0x4e, 0x47, 0xda,
		0xcd, 0xfa, 0xd5, 0x1f, 0x68, 0xf7, 0xd8, 0x65, 0x03, 0x03, 0xe9, 0x0c, 0x18, 0x8e, 0xab, 0x06,
		0x0e, 0x57, 0xb1, 0x2d, 0x41, 0x46, 0x3f, 0xb2, 0xd1, 0x64, 0x06, 0x27, 0x5a, 0x19, 0x6a, 0x91,
		0xe0, 0x90, 0x6c, 0xcb, 0x25, 0x5c, 0x23, 0x62, 0x6a, 0x39, 0x2c, 0x19, 0xac, 0xb5, 0x54, 0x49,
		0x32, 0x75, 0x0b, 0x64, 0x8f, 0x1a, 0xbe, 0x06, 0x92, 0xd9, 0x62, 0x63, 0xa0, 0xcf, 0x69, 0x36,
		0x37, 0x67, 0x79, 0x2d, 0xd0, 0x34, 0xaf, 0x2b, 0xbc, 0xcc, 0x69, 0xf1, 0xf4, 0x88, 0x2b, 0x51,
		0x83, 0x3c, 0x9a, 0xf5, 0x94, 0x34, 0xe0, 0xb8, 0xcb, 0xa5, 0x65, 0x13, 0x38, 0x01, 0x16, 0x06,
		0xe4, 0x11, 0x39, 0x4a, 0xf1, 0x49, 0x08, 0x07, 0xa6, 0xc5, 0x3a, 0x84, 0x4a, 0x89, 0x22, 0x94,
		0xd6, 0x06, 0xbf, 0x5c, 0x83, 0xc6, 0xdc, 0x1a, 0x9b, 0x73, 0x7d, 0x81, 0xfc, 0xbd, 0x99, 0x40,
		0x67, 0x4d, 0x3d, 0x4d, 0x29, 0x54, 0x56, 0x01, 0xfe, 0x13, 0xf3, 0x01, 0xc8, 0x51, 0xf4, 0xc0,
		0x48, 0x0f, 0x42, 0x8b, 0x77, 0xac, 0x47, 0x01, 0x2e, 0xcf, 0xd9, 0x3a, 0x11, 0x9a, 0x66, 0x3f,
		0xa5, 0x27, 0x43, 0x47, 0x6d, 0x55, 0xf4, 0xa4, 0xe8, 0xa8, 0x09, 0x27, 0xd2, 0xf2, 0xdc, 0xb8,
		0xa4, 0x28, 0x85, 0x0c, 0x49, 0xd1, 0xc9, 0xa6, 0x99, 0xc9, 0xd1, 0x79, 0xab, 0x21, 0xa1, 0x80,
		0x4c, 0x88, 0xaf, 0x0e, 0x83, 0xeb, 0x18, 0x50, 0x33, 0xa9, 0xc3, 0xa4, 0x89, 0x87, 0xbb, 0xe8,
		0xab, 0x64, 0x26, 0xc0, 0xa7, 0x04, 0xc8, 0xa8, 0xdc, 0xf7, 0xd8, 0x36, 0x72, 0xe5, 0xbe, 0xdf,
		0xa4, 0x6f, 0x52, 0x7a, 0xb2, 0xf4, 0x1c, 0x9a, 0xd3, 0x39, 0x72, 0x48, 0x76, 0xae, 0x74, 0xd8,
		0x62, 0xcf, 0xa9, 0xd2, 0x19, 0xfd, 0x82, 0x7a, 0x25, 0x4c, 0x87, 0xa3, 0x94, 0x95, 0x36, 0x0d,
		0x31, 0xb1, 0x9f, 0xf3, 0x43, 0x42, 0x82, 0x66, 0x35, 0x8b, 0x13, 0xa4, 0x6c, 0x19, 0xaf, 0xf8,
		0xaf, 0x30, 0x22, 0x24, 0x7b, 0x4b, 0xc5, 0xa4, 0xdb, 0x1e, 0x63, 0xe5, 0x25, 0xca, 0xce, 0x1e,
		0xb3, 0xec, 0x3c, 0xdb, 0xbb, 0xe0, 0xdc, 0x5f, 0x85, 0x5e, 0x1a, 0x13, 0xca, 0x64, 0xc0, 0x9f,
		0x53, 0x01, 0x94, 0xc1, 0x7f, 0x91, 0x43, 0x74, 0x17, 0xa3, 0xff, 0x75, 0x29, 0xe5, 0x2a, 0xa2,
		0x8d, 0xf6, 0xcd, 0x85, 0x91, 0x43, 0x1e, 0x52, 0xbb, 0xae, 0x1b, 0x23, 0x8e, 0x0c, 0x54, 0x16,
		0x2f, 0x76, 0xa0, 0xfd, 0x04, 0x6d, 0x86, 0xf8, 0xbc, 0xa0, 0x5d, 0xcd, 0x22, 0xf3, 0xe8, 0x5b,
		0x77, 0x48, 0x0c, 0x99, 0xb6, 0xb5, 0x62, 0x3c, 0x39, 0x37, 0x56, 0x0f, 0x2d, 0x39, 0xe2, 0x3e,
		0x96, 0x87, 0xe6, 0xab, 0x60, 0x83, 0xc6, 0x11, 0x38, 0x2d, 0x98, 0xa0, 0x53, 0x95, 0xf7, 0xa2,
		0x1e, 0xf5, 0x7a, 0xa9, 0x69, 0x29, 0x89, 0x31, 0xe7, 0x24, 0x33, 0x28, 0xb4, 0x2b, 0xb4, 0xd7,
		0x1a, 0xed, 0x4b, 0xcb, 0x26, 0xec, 0x68, 0xf7, 0x5b, 0x2b, 0xb4, 0x2b, 0xb4, 0x0b, 0x85, 0xf8,
		0x51, 0x93, 0x54, 0x77, 0xf1, 0xd3, 0x57, 0x21, 0x7e, 0xcc, 0xde, 0x8a, 0xda, 0x87, 0xf8, 0x71,
		0x24, 0xbd, 0xd6, 0x61, 0x59, 0x0e, 0xd1, 0x59, 0x40, 0xcb, 0x93, 0x2d, 0xd7, 0x57, 0xc0, 0x66,
		0x4c, 0xae, 0xc6, 0x77, 0xc0, 0x53, 0x3f, 0x2d, 0xb4, 0x3a, 0x48, 0xab, 0x3a, 0x85, 0x96, 0x80,
		0x41, 0x62, 0x16, 0x15, 0x3b, 0xcc, 0xb2, 0x4d, 0x9e, 0xd8, 0xd9, 0x4c, 0x6c, 0xdf, 0x79, 0xe5,
		0xe5, 0x79, 0x88, 0x22, 0x26, 0xa5, 0x0e, 0xd5, 0x7c, 0x91, 0x63, 0xea, 0x42, 0x0e, 0xf9, 0x9b,
		0xff, 0x96, 0x87, 0xbb, 0xe0, 0x2d, 0x95, 0x5b, 0xec, 0x32, 0x6d, 0x65, 0xac, 0x33, 0x61, 0x31,
		0xdb, 0x2d, 0x66, 0x0b, 0xa2, 0x33, 0x14, 0x9a, 0xdd, 0x69, 0xb7, 0xef, 0x4b, 0xb6, 0x60, 0x7a,
		0x60, 0x5c, 0x9d, 0x2e, 0xd8, 0xf2, 0x87, 0x28, 0xcb, 0x60, 0x77, 0xb8, 0x25, 0x16, 0xb2, 0xb6,
		0xea, 0x80, 0xcc, 0x74, 0x19, 0x5b, 0x59, 0xb6, 0xd3, 0x64, 0x0e, 0xcd, 0x69, 0xce, 0xda, 0x6d,
		0xe8, 0xec, 0x0d, 0x3d, 0x21, 0x3e, 0x60, 0x26, 0x5b, 0xdf, 0xb9, 0x8f, 0x93, 0x02, 0x49, 0xde,
		0x6c, 0x25, 0xaf, 0xea, 0x58, 0xe8, 0x4a, 0xa1, 0xb1, 0x76, 0x68, 0x1c, 0x78, 0x68, 0xbc, 0x1e,
		0xbb, 0xb6, 0x0d, 0x31, 0x69, 0xb6, 0x36, 0xc1, 0x62, 0xc3, 0xce, 0x4e, 0xc9, 0xb4, 0x83, 0x29,
		0xb7, 0xeb, 0x6f, 0x50, 0xb3, 0xed, 0xcf, 0x24, 0x5a, 0xb9, 0xf5, 0x1a, 0xdc, 0xaf, 0xab, 0x0e,
		0xdf, 0x6b, 0xe5, 0x97, 0xcd, 0xfd, 0xf3, 0x11, 0x82, 0x85, 0x89, 0xcd, 0x99, 0xaf, 0xde, 0x6f,
		0x03, 0xb3, 0xc0, 0xd8, 0xf4, 0x74, 0x10, 0x30, 0x82, 0x60, 0x5d, 0x30, 0x79, 0xd2, 0x7e, 0x35,
		0x85, 0x74, 0xb9, 0x16, 0xa5, 0xea, 0xd2, 0xba, 0x55, 0x2b, 0x9c, 0x54, 0x15, 0x8f, 0xae, 0x73,
		0xde, 0xce, 0x16, 0x84, 0x2b, 0x5a, 0x07, 0x43, 0xf2, 0xdd, 0xb2, 0xbf, 0xe9, 0xc8, 0xa3, 0x58,
		0x4c, 0x53, 0x3c, 0x13, 0x2d, 0xf7, 0xac, 0x7a, 0x62, 0x54, 0x6f, 0xbd, 0x13, 0x23, 0x75, 0xd1,
		0xc1, 0xbe, 0xb4, 0x89, 0x54, 0x2c, 0x1c, 0x90, 0x2a, 0x91, 0x86, 0x95, 0xb2, 0xf5, 0x08, 0x75,
		0xd1, 0x41, 0xd6, 0x30, 0x0f, 0xec, 0xa2, 0x83, 0x57, 0x55, 0xdf, 0x5b, 0x51, 0x3a, 0x3f, 0xa5,
		0xab, 0xfa, 0xde, 0xaa, 0xbe, 0xb7, 0x9c, 0xc9, 0x56, 0x59, 0xdf, 0x9b, 0xa3, 0xb4, 0x77, 0xdd,
		0xe2, 0xe4, 0x14, 0xd3, 0xca, 0x53, 0x71, 0x93, 0xdb, 0xad, 0xdb, 0x70, 0xca, 0x53, 0x18, 0x29,
		0xfa, 0x18, 0x5b, 0x3c, 0x45, 0xb7, 0x2e, 0xf1, 0x14, 0x54, 0x78, 0xc8, 0xf0, 0x67, 0x55, 0x1c,
		0x46, 0x41, 0x83, 0x0f, 0x23, 0x6b, 0xc9, 0xd9, 0x81, 0x3c, 0x58, 0x71, 0x70, 0x13, 0x61, 0xee,
		0xc2, 0xa9, 0x22, 0x09, 0xc3, 0x4d, 0x04, 0x76, 0xc5, 0xe1, 0x57, 0xc4, 0xf4, 0x54, 0x08, 0x8e,
		0x52, 0x6c, 0x4f, 0x85, 0xe1, 0xc9, 0x6e, 0x65, 0x02, 0xec, 0x51, 0x20, 0xec, 0x41, 0x3f, 0x02,
		0x46, 0x60, 0x11, 0xa3, 0x70, 0x31, 0x97, 0x85, 0xe8, 0x2a, 0x08, 0xd4, 0x39, 0xe0, 0x33, 0x19,
		0xf3, 0x6b, 0xa7, 0x99, 0xeb, 0xde, 0x6e, 0xc7, 0xf2, 0x1d, 0xc1, 0xbd, 0x6b, 0x18, 0x67, 0xf0,
		0x1a, 0x18, 0x22, 0xf9, 0xc1, 0x85, 0x32, 0xaa, 0x93, 0x24, 0x1d, 0x1d, 0xd7, 0xa6, 0x3e, 0xd0,
		0xd8, 0x67, 0x2a, 0xae, 0x0d, 0x27, 0xe0, 0xfb, 0x23, 0xc4, 0x11, 0x43, 0x2b, 0x72, 0x80, 0x03,
		0x89, 0xc0, 0xb0, 0x41, 0xc1, 0x14, 0x6b, 0x99, 0x06, 0x69, 0xe9, 0x4c, 0x22, 0x9b, 0x61, 0x08,
		0xad, 0xae, 0x50, 0xdf, 0xab, 0x93, 0x72, 0x9f, 0x58, 0x9d, 0xee, 0x8b, 0x5a, 0x12, 0xc5, 0xc8,
		0x4e, 0x1b, 0x73, 0x6b, 0x7d, 0xef, 0x61, 0x50, 0x8d, 0xa0, 0xdd, 0xee, 0xf8, 0x45, 0x1e, 0xae,
		0x41, 0x23, 0xca, 0x92, 0xc7, 0xd6, 0x62, 0x61, 0xe1, 0xab, 0x85, 0x39, 0xd6, 0x9f, 0xec, 0x69,
		0xa3, 0x55, 0x3d, 0x75, 0x7d, 0xb6, 0xac, 0xe5, 0xc8, 0x1c, 0x7f, 0xdb, 0xee, 0xb1, 0x13, 0xf1,
		0x55, 0x44, 0x80, 0x60, 0x61, 0xb0, 0x6b, 0x19, 0x07, 0xd6, 0x14, 0xf8, 0xb3, 0x5c, 0xcf, 0x47,
		0x11, 0x1d, 0x23, 0xd1, 0x49, 0x5d, 0x74, 0x45, 0x8b, 0xbb, 0xb4, 0x18, 0x94, 0x8d, 0x4b, 0xa5,
		0xc7, 0x5f, 0xd2, 0x09, 0x72, 0x12, 0x38, 0x0e, 0xea, 0x40, 0x90, 0x77, 0xfe, 0xe0, 0x77, 0x90,
		0x01, 0x2c, 0x3c, 0x7f, 0xe6, 0xc0, 0xc6, 0x7a, 0x3e, 0x8a, 0x20, 0x19, 0x09, 0x52, 0xea, 0xa2,
		0xbf, 0x72, 0x82, 0xcc, 0x0c, 0xbc, 0x18, 0xc6, 0x54, 0xcc, 0x81, 0x5f, 0xb3, 0x24, 0x1e, 0x96,
		0x11, 0xfd, 0x7d, 0xb8, 0x25, 0xd8, 0x64, 0xad, 0xa0, 0x9a, 0x69, 0xa5, 0x1e, 0xe3, 0x09, 0x30,
		0x90, 0xac, 0x64, 0xc3, 0xca, 0xd7, 0x15, 0xad, 0x8a, 0x68, 0xac, 0x52, 0x56, 0xbe, 0x9e, 0x04,
		0xcb, 0xdc, 0x7a, 0x28, 0x2b, 0x8e, 0x84, 0xc1, 0x58, 0xc7, 0x74, 0xfb, 0x0a, 0x13, 0xd1, 0x28,
		0x6b, 0x93, 0xb2, 0x36, 0xbd, 0x5a, 0x6b, 0x53, 0x4a, 0x48, 0x62, 0x44, 0xf0, 0x45, 0xc9, 0xa4,
		0x13, 0x94, 0xf6, 0x7a, 0xcd, 0x86, 0x29, 0xd1, 0x7a, 0x79, 0x25, 0x48, 0xfd, 0x7c, 0x53, 0x49,
		0xbc, 0xa6, 0xb5, 0xb2, 0x45, 0xf1, 0xb0, 0x13, 0xb1, 0xd5, 0x55, 0xd2, 0x9b, 0xa1, 0x45, 0x9e,
		0xa3, 0x89, 0x31, 0x2f, 0x6a, 0xab, 0x07, 0x64, 0x47, 0x75, 0xee, 0xaa, 0x57, 0x9d, 0x28, 0x2f,
		0x63, 0xf7, 0x66, 0x02, 0x6a, 0xfc, 0xe7, 0x1f, 0x41, 0x27, 0x37, 0xeb, 0x3e, 0x22, 0xb5, 0xf6,
		0xc2, 0x4f, 0x5f, 0x61, 0x8e, 0x6d, 0x44, 0x15, 0x7d, 0x50, 0x6e, 0xdb, 0x72, 0xa8, 0x89, 0x3f,
		0xe9, 0x7d, 0x97, 0x68, 0xf4, 0x80, 0xd3, 0x4d, 0x75, 0x06, 0x00, 0x01, 0x75, 0x1d, 0x99, 0xba,
		0x8e, 0xac, 0x06, 0x8b, 0xa2, 0xee, 0xbb, 0x61, 0xd0, 0x61, 0x3d, 0xc9, 0xb7, 0xfd, 0x57, 0xea,
		0xcd, 0x36, 0x09, 0x67, 0x52, 0x9a, 0x27, 0x09, 0x23, 0x21, 0x2f, 0x92, 0xa4, 0x6a, 0xd7, 0x15,
		0x7a, 0x8d, 0x8e, 0xb7, 0x0a, 0x76, 0x75, 0x5e, 0xa1, 0xc3, 0xa9, 0x1e, 0xcf, 0x4d, 0x4a, 0x29,
		0xbe, 0xa0, 0x54, 0x47, 0x10, 0x46, 0x42, 0x4e, 0x20, 0x49, 0xf4, 0x54, 0xa1, 0xd3, 0xe7, 0x78,
		0xe9, 0xa9, 0x3a, 0xa7, 0xce, 0xb1, 0xd0, 0xd3, 0xae, 0xc1, 0xca, 0x71, 0x47, 0x41, 0x2d, 0x32,
		0x7d, 0x04, 0xa7, 0x96, 0x0d, 0x9b, 0xa1, 0x05, 0xeb, 0x14, 0x34, 0xda, 0x8d, 0x74, 0x0f, 0xcf,
		0xf6, 0x21, 0x73, 0x4a, 0xa0, 0x9d, 0x7c, 0x46, 0x8e, 0x9f, 0xa7, 0x8c, 0xeb, 0xdc, 0x2a, 0xf0,
		0xeb, 0xbc, 0x92, 0xdb, 0xde, 0xf6, 0xef, 0xb7, 0x59, 0xa9, 0xa2, 0x4e, 0xaa, 0xa8, 0xd3, 0x3e,
		0xb3, 0xf4, 0x29, 0x9a, 0xc6, 0xa3, 0xc5, 0xc6, 0xdb, 0x0a, 0x66, 0xe8, 0xdf, 0xa4, 0xe9, 0x91,
		0xe6, 0x64, 0x02, 0x27, 0x80, 0x58, 0xc0, 0xdc, 0x10, 0x14, 0x48, 0x08, 0x3d, 0x6f, 0x7c, 0xaf,
		0x26, 0x65, 0xbf, 0xd8, 0x2a, 0xd5, 0x33, 0x87, 0xbf, 0xbc, 0xea, 0x57, 0xd9, 0xd6, 0x5d, 0xa1,
		0x2a, 0x58, 0x99, 0x76, 0xdc, 0x22, 0xd5, 0x63, 0x0e, 0xb7, 0x96, 0x91, 0x4a, 0xa8, 0x62, 0x36,
		0xa1, 0x6e, 0x2f, 0x41, 0x84, 0x9e, 0x7a, 0x39, 0x26, 0x70, 0x92, 0x67, 0x2c, 0x55, 0x99, 0xa0,
		0xf5, 0xca, 0x04, 0x3d, 0x7f, 0x73, 0x3c, 0x99, 0xa0, 0xf4, 0x8a, 0x44, 0x04, 0xda, 0x38, 0x17,
		0x52, 0xda, 0xe0, 0xbd, 0xfe, 0x5f, 0xa6, 0xfe, 0x7f, 0x86, 0x7e, 0xf9, 0xcb, 0x7f, 0xfc, 0xd3,
		0x3f, 0xff, 0xcb, 0x7f, 0xdf, 0xbb, 0x86, 0xd1, 0xeb, 0x37, 0x5b, 0x2f, 0xff, 0x76, 0xfd, 0x3f,
		0xff, 0xdf, 0x3e, 0x6d, 0x3c, 0x5c, 0xfd, 0xfb, 0x3b, 0x7d, 0xb8, 0x6d, 0x05, 0x68, 0xcd, 0xfe,
		0x55, 0x2b, 0x25, 0x6d, 0x75, 0x69, 0x5b, 0xc4, 0x1a, 0x5b, 0xf3, 0x7c, 0xfe, 0x1a, 0xb6, 0x54,
		0x49, 0xab, 0x87, 0x9a, 0xb4, 0x3a, 0x9a, 0x71, 0xdc, 0xe5, 0xe0, 0x35, 0x56, 0x09, 0xaa, 0x2a,
		0x41, 0x35, 0xbd, 0x21, 0x4b, 0xa9, 0x9f, 0xcc, 0x3d, 0x63, 0x2b, 0xe9, 0x12, 0x1f, 0x18, 0x43,
		0x29, 0xa0, 0xe4, 0x71, 0x11, 0xe7, 0x97, 0x59, 0x61, 0xe0, 0xf8, 0x1c, 0xaa, 0xa4, 0x30, 0xf6,
		0x45, 0x68, 0xa0, 0x38, 0x2d, 0x14, 0xb5, 0x52, 0xa9, 0xf8, 0x45, 0x11, 0x55, 0x57, 0x22, 0x5d,
		0x00, 0xc6, 0xd2, 0x47, 0x49, 0x4b, 0x04, 0x4b, 0x29, 0xa4, 0xe4, 0xd4, 0x78, 0x4a, 0x23, 0x25,
		0x9e, 0xe6, 0x2b, 0x95, 0x94, 0x78, 0x9c, 0xbd, 0x74, 0x92, 0xe0, 0xce, 0x45, 0xa6, 0xc9, 0x5a,
		0x5a, 0x29, 0xf1, 0x28, 0x57, 0xa9, 0xa5, 0x2c, 0x86, 0x95, 0x57, 0x7a, 0xa9, 0x26, 0xfe, 0x89,
		0x83, 0x0a, 0x3c, 0x05, 0xcd, 0x36, 0xb8, 0x06, 0x8d, 0xf5, 0xfe, 0xf8, 0xb7, 0x4e, 0xdf, 0x63,
		0xd0, 0x6c, 0xb7, 0x3b, 0xe6, 0x14, 0xe9, 0x8e, 0x39, 0x45, 0x83, 0xcd, 0x07, 0xff, 0xdc, 0x79,
		0xdd, 0x40, 0xcb, 0xa7, 0x73, 0xdd, 0xc5, 0x68, 0x6c, 0x3a, 0xa4, 0x31, 0xdc, 0xa9, 0xcc, 0xd9,
		0x08, 0xb6, 0x8a, 0xf1, 0x3d, 0x7d, 0x19, 0xef, 0x81, 0x4f, 0x4b, 0x5c, 0x70, 0x1c, 0xe7, 0xfa,
		0xdc, 0x1c, 0xc1, 0x39, 0x9c, 0x48, 0x9b, 0x97, 0xc4, 0xf7, 0xcd, 0xcf, 0x9e, 0x96, 0x58, 0x97,
		0xb5, 0xea, 0xe1, 0xdb, 0xa4, 0xac, 0xbd, 0x6d, 0xb9, 0x04, 0xea, 0xc4, 0xb4, 0x67, 0x90, 0xf2,
		0x9e, 0xea, 0x03, 0x9a, 0xff, 0x8a, 0x03, 0x7b, 0xe6, 0xa3, 0x6f, 0xf2, 0xb4, 0xa1, 0xe3, 0x80,
		0xa9, 0xb9, 0x40, 0x73, 0x04, 0x9d, 0x30, 0x08, 0x37, 0x18, 0x2d, 0x73, 0x11, 0x57, 0x99, 0x1e,
		0xad, 0x32, 0x3c, 0x5b, 0x52, 0x3d, 0x5c, 0xa9, 0x6a, 0x05, 0xd7, 0xa2, 0xaa, 0xf0, 0x65, 0x66,
		0x2b, 0xd3, 0x86, 0xc6, 0x04, 0x0e, 0x10, 0x9b, 0x27, 0xf9, 0x94, 0xf6, 0xae, 0x52, 0xda, 0x95,
		0xd2, 0x5e, 0xec, 0xe0, 0x5b, 0xe8, 0x00, 0x2c, 0x49, 0xe1, 0x17, 0x3e, 0x10, 0x27, 0xb4, 0x54,
		0xae, 0x27, 0x87, 0x9c, 0x23, 0xe4, 0x3b, 0x29, 0x0b, 0x13, 0x5f, 0x11, 0x22, 0x94, 0x47, 0x8c,
		0xb2, 0xa4, 0x63, 0x61, 0xe2, 0x94, 0x2e, 0x0e, 0xa5, 0x10, 0xab, 0xa0, 0xd8, 0xe2, 0x3d, 0xb7,
		0xf1, 0x9e, 0xbc, 0x25, 0x12, 0xa4, 0xe8, 0x49, 0xbc, 0xd8, 0x89, 0x5c, 0xce, 0xc9, 0x5c, 0xd2,
		0x09, 0x5d, 0xc2, 0x49, 0x5d, 0x70, 0xe7, 0x25, 0x9c, 0xdc, 0xe5, 0x9c, 0xe0, 0x8b, 0x9e, 0xe4,
		0xeb, 0xa7, 0x10, 0xf2, 0xe4, 0x46, 0xc4, 0x0e, 0x4d, 0x05, 0xa4, 0x62, 0xec, 0x35, 0x4a, 0xea,
		0x28, 0xa9, 0x73, 0xe4, 0x52, 0x07, 0x4d, 0x20, 0x26, 0x88, 0x3c, 0xf3, 0xe5, 0xae, 0x27, 0xa4,
		0xce, 0x85, 0xc0, 0xb3, 0x37, 0xeb, 0xae, 0x3f, 0x98, 0x8e, 0x04, 0xf3, 0xc3, 0x68, 0xb6, 0xd4,
		0xd7, 0x47, 0x64, 0xdd, 0x3f, 0x22, 0x3f, 0x8b, 0xe2, 0xc8, 0x0f, 0x2a, 0x70, 0x84, 0xb4, 0x5b,
		0x71, 0x63, 0x61, 0xea, 0x9c, 0xe0, 0xd3, 0x12, 0x6b, 0xc2, 0xaf, 0x5a, 0x9d, 0x56, 0x3d, 0xfe,
		0x34, 0xb3, 0xdf, 0xc1, 0xcf, 0xe7, 0x38, 0xe6, 0xd1, 0x3f, 0xb2, 0x7d, 0xe9, 0x1f, 0xc3, 0x3c,
		0x92, 0x66, 0xe8, 0xa3, 0x98, 0xcd, 0x51, 0xec, 0x4d, 0xd4, 0x0c, 0x5f, 0x60, 0x1e, 0x42, 0x4f,
		0x0e, 0x6b, 0xa6, 0x76, 0x14, 0x70, 0xbe, 0x85, 0xef, 0x10, 0x72, 0xc2, 0x15, 0xdf, 0xd3, 0x58,
		0xb1, 0x47, 0xdf, 0x2d, 0xe7, 0xfb, 0xb6, 0x5a, 0x7e, 0x8e, 0xd2, 0x6e, 0x44, 0xb2, 0x9f, 0xaa,
		0x04, 0xae, 0x41, 0xac, 0xba, 0x4e, 0xf8, 0x5f, 0x70, 0xf3, 0xdf, 0x26, 0xa3, 0x76, 0x93, 0xf2,
		0x57, 0xe4, 0xf0, 0x2a, 0xc5, 0x21, 0x93, 0x98, 0xe9, 0xa7, 0xbf, 0x7f, 0xf9, 0x03, 0x20, 0x07,
		0x60, 0x8b, 0x00, 0xc7, 0x5d, 0x2e, 0x2d, 0x9b, 0xc0, 0x09, 0x40, 0x38, 0x11, 0x8e, 0xee, 0x00,
		0x8b, 0x3c, 0x42, 0x1b, 0x90, 0x47, 0x13, 0x17, 0xac, 0xfb, 0x28, 0xeb, 0x74, 0x90, 0x75, 0x52,
		0x90, 0xe5, 0xb9, 0x91, 0x7e, 0x78, 0xc8, 0x3c, 0x48, 0x14, 0xdb, 0x85, 0x42, 0x63, 0x59, 0xed,
		0x99, 0x5d, 0x09, 0x32, 0x6b, 0x99, 0x44, 0x1d, 0x73, 0x9a, 0x1e, 0x33, 0x71, 0x47, 0x27, 0xaa,
		0x88, 0xbc, 0x6a, 0x22, 0x97, 0xb3, 0x1b, 0x8a, 0xd8, 0xf9, 0x88, 0x3d, 0x25, 0x7a, 0xa3, 0x05,
		0x8e, 0x98, 0xe6, 0x3f, 0x9f, 0x29, 0x89, 0x5e, 0x03, 0x62, 0x2f, 0xb8, 0x0d, 0x8a, 0xca, 0x05,
		0xa9, 0xbc, 0x1f, 0xa1, 0x72, 0x45, 0xe4, 0x8a, 0xc8, 0x15, 0x91, 0x1f, 0x0f, 0x91, 0xa7, 0x06,
		0x8a, 0x1e, 0x35, 0x99, 0x7b, 0x73, 0xd5, 0x6f, 0xbe, 0x3c, 0x9d, 0x2b, 0x5a, 0xaf, 0x9c, 0xd6,
		0x25, 0xec, 0x85, 0x22, 0x78, 0x6e, 0x82, 0xef, 0xbf, 0x4e, 0x82, 0xef, 0x2b, 0x82, 0xaf, 0x0d,
		0xc1, 0xf7, 0x5f, 0x0b, 0xc1, 0x9f, 0x94, 0xeb, 0x7a, 0xa8, 0x2a, 0x1b, 0x68, 0x5d, 0xb9, 0x48,
		0x24, 0x7a, 0x87, 0xad, 0xa4, 0x51, 0xe2, 0x29, 0xe6, 0x12, 0x47, 0xc9, 0x27, 0x0b, 0x94, 0x3c,
		0x4a, 0xbc, 0x8c, 0xbd, 0x04, 0x52, 0xf6, 0xa3, 0xb9, 0x25, 0x91, 0x44, 0x77, 0x85, 0xb3, 0x12,
		0x78, 0xf8, 0x1c, 0x4f, 0xcd, 0x98, 0x4d, 0x69, 0x80, 0xce, 0x68, 0xb6, 0xec, 0x70, 0xc6, 0xe6,
		0x03, 0xae, 0x7a, 0x32, 0x5f, 0xd6, 0x3d, 0x3d, 0x7c, 0x98, 0x2d, 0x1f, 0xde, 0x4f, 0xd1, 0x9d,
		0xd7, 0xd1, 0x3e, 0x53, 0x16, 0x5c, 0x62, 0x61, 0x6b, 0x61, 0xb9, 0x8e, 0x1e, 0x54, 0xa2, 0x14,
		0xc8, 0x5d, 0x48, 0xbc, 0x42, 0x65, 0x1e, 0xab, 0x24, 0x06, 0x29, 0xb4, 0x7e, 0x6b, 0xe2, 0x89,
		0x49, 0x2c, 0xfb, 0x99, 0x23, 0xd7, 0xa5, 0x40, 0xb6, 0xb2, 0xa3, 0x63, 0x77, 0x31, 0x82, 0xb6,
		0x40, 0xae, 0x32, 0xcf, 0x75, 0x2b, 0x5f, 0x4d, 0xec, 0xeb, 0x7e, 0xa5, 0xa7, 0x8a, 0x8a, 0x54,
		0x3b, 0x0f, 0x1f, 0x16, 0xac, 0x7a, 0x1e, 0x3e, 0x5f, 0xb4, 0xd0, 0xf7, 0x76, 0x7b, 0x44, 0x0b,
		0x7e, 0x17, 0x38, 0x90, 0x08, 0x55, 0x45, 0x4f, 0x2c, 0xdd, 0x79, 0xef, 0xf2, 0xfc, 0xb2, 0xff,
		0xa6, 0x77, 0x79, 0x71, 0xf8, 0x6b, 0x78, 0x04, 0xe9, 0x79, 0xbe, 0x1f, 0xcd, 0xd6, 0xd1, 0x84,
		0x5f, 0xc6, 0x6d, 0x1f, 0x55, 0xb2, 0x4d, 0xc9, 0xb6, 0x03, 0x94, 0x6d, 0x28, 0x8c, 0x63, 0x16,
		0x29, 0xc4, 0x71, 0xc9, 0xf1, 0xcc, 0x7a, 0x8c, 0x7b, 0xab, 0x83, 0xe0, 0x1b, 0x77, 0xf9, 0xe7,
		0x96, 0x98, 0xe3, 0x5b, 0x81, 0x67, 0x59, 0x2b, 0xa7, 0x65, 0xbe, 0xa0, 0xd9, 0x1c, 0x18, 0xfa,
		0xe5, 0xf0, 0x65, 0xd0, 0xd5, 0x2f, 0x87, 0xc1, 0xc7, 0xae, 0xff, 0xbf, 0xe0, 0x73, 0x6f, 0x60,
		0xe8, 0xe7, 0x9b, 0xcf, 0x17, 0x03, 0x43, 0xbf, 0x18, 0xb6, 0xee, 0xef, 0xdb, 0xad, 0x9f, 0x67,
		0x2b, 0xfe, 0x07, 0xb5, 0xb2, 0x8f, 0xe9, 0xa7, 0x7b, 0xdc, 0xf2, 0xfe, 0x01, 0x6f, 0xf9, 0xd5,
		0x8b, 0xb7, 0x31, 0xa6, 0x3e, 0x7d, 0xaf, 0xff, 0x36, 0xfc, 0x69, 0x9c, 0x9e, 0xaf, 0x5a, 0x57,
		0xad, 0xe6, 0xee, 0x77, 0x57, 0xad, 0x9f, 0xc6, 0xe9, 0xc5, 0xaa, 0xd9, 0x4c, 0xf9, 0xe5, 0x5d,
		0xda, 0x3b, 0x5a, 0x2f, 0xcd, 0x66, 0x73, 0xbd, 0xd9, 0x31, 0x00, 0x0c, 0x8c, 0xee, 0xf0, 0x9d,
		0xff, 0x31, 0xf8, 0x1b, 0x42, 0x88, 0xa9, 0x71, 0xab, 0x7c, 0xe0, 0x1c, 0xd8, 0x5d, 0x64, 0x75,
		0xbc, 0xc2, 0x05, 0x5b, 0xa4, 0xc9, 0x6c, 0xdb, 0x8e, 0x59, 0xb5, 0xef, 0xb5, 0xf5, 0x95, 0x1c,
		0xf7, 0x5a, 0x05, 0x17, 0x4b, 0x7c, 0xf8, 0xfd, 0x4b, 0x58, 0x45, 0xdd, 0x37, 0xea, 0x6c, 0x6c,
		0xa6, 0x4b, 0xcb, 0x71, 0xd0, 0x68, 0x0e, 0x59, 0x2e, 0x13, 0x01, 0xaa, 0x86, 0xfd, 0x5a, 0xb5,
		0x91, 0xb4, 0x9c, 0xc7, 0x7b, 0x99, 0x44, 0xce, 0x3d, 0xfb, 0xac, 0x85, 0xcf, 0x4b, 0xa0, 0x82,
		0xb8, 0xa3, 0xc0, 0xbf, 0x7f, 0x20, 0x73, 0xa3, 0x38, 0xea, 0x9f, 0xbf, 0x0e, 0xcc, 0x73, 0x2f,
		0x5e, 0xdd, 0xaf, 0x66, 0x60, 0x38, 0xce, 0x2e, 0x6d, 0xe8, 0x40, 0x3c, 0x86, 0x65, 0x8a, 0x95,
		0x8f, 0x9b, 0x0b, 0x2e, 0xc0, 0x87, 0xdf, 0xbf, 0xec, 0xff, 0xa4, 0x18, 0xcc, 0xaf, 0xca, 0xb3,
		0x62, 0x7c, 0x01, 0x0e, 0xec, 0xae, 0xb9, 0x32, 0x2f, 0x4d, 0x8d, 0xba, 0x48, 0xa4, 0xde, 0x94,
		0x1a, 0xf5, 0x88, 0x68, 0x7b, 0xb9, 0xa1, 0xa4, 0x8c, 0x5b, 0x07, 0x72, 0x8a, 0x4b, 0x8b, 0x2d,
		0x49, 0x91, 0x3b, 0x07, 0x08, 0xcd, 0x74, 0x10, 0xd2, 0xbb, 0xdf, 0x2a, 0xab, 0x1a, 0x33, 0x43,
		0x81, 0x1e, 0x8d, 0xea, 0xc0, 0x1e, 0xaa, 0xdb, 0x0c, 0x0e, 0xfe, 0x36, 0x03, 0xb6, 0xd4, 0x7e,
		0x96, 0x14, 0x7e, 0xbe, 0x54, 0xfd, 0xed, 0x49, 0x07, 0xe9, 0x14, 0x94, 0xc6, 0x6d, 0xf0, 0x6c,
		0xf9, 0xf6, 0x9c, 0xb6, 0x60, 0xe6, 0x18, 0x0d, 0x06, 0x45, 0x96, 0xb3, 0x6b, 0x36, 0xd5, 0x45,
		0x7e, 0xbf, 0x68, 0xc9, 0x76, 0x67, 0xa3, 0xfc, 0x9e, 0x99, 0xaf, 0x8b, 0xa4, 0xcb, 0xd2, 0x21,
		0x2f, 0x9d, 0x9c, 0xd0, 0xbf, 0xd9, 0x99, 0x28, 0xe5, 0x92, 0x2b, 0x7a, 0x24, 0x48, 0x7e, 0xc4,
		0x87, 0x50, 0x64, 0x07, 0x43, 0x04, 0x07, 0x43, 0xa4, 0xc6, 0xee, 0x24, 0x73, 0xe4, 0x24, 0x8f,
		0x7c, 0x4c, 0xa1, 0x5e, 0x66, 0x71, 0x18, 0xc7, 0xc2, 0x76, 0x5f, 0x22, 0xc3, 0xd5, 0x96, 0x81,
		0x95, 0x8e, 0x40, 0x27, 0x59, 0x3c, 0x69, 0x7b, 0x01, 0x44, 0xa4, 0xd1, 0xee, 0x7e, 0xa6, 0x4a,
		0xa4, 0x4c, 0x49, 0x44, 0x93, 0x40, 0x69, 0x92, 0x27, 0x6d, 0xfa, 0x39, 0xe2, 0x86, 0x59, 0xcc,
		0x30, 0x8b, 0x97, 0x2c, 0xb1, 0xa2, 0x71, 0x62, 0x3f, 0x53, 0x76, 0x6c, 0x67, 0x1e, 0x54, 0xf2,
		0x4a, 0x99, 0x34, 0xc5, 0x12, 0x9b, 0x77, 0xd1, 0x0d, 0xfd, 0xa6, 0xb8, 0x7c, 0x79, 0xb2, 0x71,
		0xd2, 0xe6, 0x78, 0xee, 0xb9, 0x7d, 0xb0, 0xec, 0xbe, 0xd6, 0x15, 0xfd, 0x0a, 0x3b, 0xf6, 0x29,
		0x74, 0x8d, 0xea, 0xe6, 0xc0, 0xc8, 0x3e, 0x53, 0x54, 0xbf, 0x5c, 0x53, 0xba, 0xf6, 0x68, 0xce,
		0xe7, 0x16, 0x88, 0x18, 0xba, 0x53, 0xee, 0x8c, 0x19, 0x66, 0x71, 0x83, 0x93, 0xc8, 0x12, 0x67,
		0xb1, 0x2e, 0x0d, 0x39, 0xbf, 0x99, 0xdf, 0xe0, 0x57, 0xcb, 0x4a, 0x92, 0xca, 0x2e, 0x3b, 0xd3,
		0xa2, 0x3f, 0xc5, 0x58, 0xd5, 0xaf, 0xf0, 0x09, 0x6d, 0xd8, 0xd2, 0xea, 0x64, 0xf5, 0x0f, 0x00,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xd4, 0x35, 0x7f, 0xfe, 0x4c, 0x01,
		0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes(){
  ΛEnumTypes = map[string][]reflect.Type{
	"/interface/admin-state": []reflect.Type{
		reflect.TypeOf((E_SdcioModelIf_AdminState)(0)),
	},
	"/interface/subinterface/type": []reflect.Type{
		reflect.TypeOf((E_SdcioModelCommon_SiType)(0)),
	},
	"/network-instance/admin-state": []reflect.Type{
		reflect.TypeOf((E_SdcioModelNi_AdminState)(0)),
	},
	"/network-instance/protocol/bgp/admin-state": []reflect.Type{
		reflect.TypeOf((E_SdcioModelNi_AdminState)(0)),
	},
	"/network-instance/protocol/bgp/afi-safi/admin-state": []reflect.Type{
		reflect.TypeOf((E_SdcioModelNi_AdminState)(0)),
	},
	"/network-instance/protocol/bgp/afi-safi/afi-safi-name": []reflect.Type{
		reflect.TypeOf((E_SdcioModelCommon_BgpAddressFamily)(0)),
	},
	"/network-instance/type": []reflect.Type{
		reflect.TypeOf((E_SdcioModelNi_NiType)(0)),
	},
  }
}

